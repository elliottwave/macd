# Disclaimer: This algorithm is a proof of concept and exemplifies the
# mechanics of creating a strategy based on certain indicators, candle
# patterns, and/or statistical models. This strategy is currently a work
# in progress and we recommend varying the parameters of this strategy
# and/or building on top of it before deploying it to the live markets
# (you should always ensure that backtests indicate a profitable strategy
# before deploying any strategy live).

# youtube: biSv6994rpY


"""
### Strategy summary:

This strategy computes two exponential moving averages (EMAs):

1) Based on the last `WINDOW_SHORT` number of closing prices
2) Based on the last `WINDOW_LONG` number of closing prices

The difference between these two EMAs is calculated:

`ema_diff = (ema_short - ema_long) / ema_long * 100`

This script buys the given asset when:
`ema_diff < EMA_DIFF_BUY_TRIG` (above)

and sells when:
`ema_diff > EMA_DIFF_SELL_TRIG` (specified above)

"""


# Imports
import pandas as pd
import numpy as np
from cryzen import plot, param
import talib.stream as ta


# Exchange, symbol to trade, and starting capital
EXCHANGE_NAME  = param('crix', type='dropdown', values='crix')
SYMBOL_NAME    = param("eth_btc", type='dropdown', values=['ltc_btc', 'eth_btc', 'xrp_btc', 'xlm_btc', 'bch_btc'])
CAPITAL_BASE   = param(1000, type='num', values=[50,1,10000]) # Units in `QUOTE_CURRENCY` below
QUOTE_CURRENCY = 'btc'


# Trading frequency, and time range to backtest over
# choices: 'minute', or 'daily'
DATA_FREQUENCY = param('daily', type='dropdown', values=['daily'])



START_TIME = pd.to_datetime('2018-06-10', utc=True)
END_TIME = pd.to_datetime('2019-06-10', utc=True)


# Strategy Parameters
WINDOW_SHORT = param(15, type='num', values=[7,1,60])
WINDOW_LONG  = param(34, type='num', values=[7,1,120])
EMA_ALPHA    = 0.1 # Decay factor for exponential moving average
                   # Between 0 & 1
                   # Higher value weights recent data more
EMA_DIFF_BUY_TRIG  = param(-2.7, type='num', values=[-10,0.1,10])
EMA_DIFF_SELL_TRIG = param(1.9, type='num', values=[-10,0.1,10])
# For more details on the exponential moving average, please see:
# https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average


# Internal Parameters
BOUGHT = False


# `initialize` runs once before the start of a strategy
# (for both backtests and live deployments).
#
# `context` is a shared variable between the various
# functions in this script.
def initialize(context):
    # `context.asset` can be accessed from other
    # functions involved in this strategy such as `handle_data`
    # Feel free to define `context.anything = whatever`
    context.asset = symbol(SYMBOL_NAME)


# `handle_data` runs every time there is a new complete candle
# (contained in the `data` argument).
#
# If `DATA_FREQUENCY` above is set to 'minute', `handle_data` will
# get called at the end of every minute; if it is set to 'daily'
# it will get called at the end of every day (UTC time).
def handle_data(context, data):
    
    global BOUGHT
    
    # Get data
    historical_data = data.history(
        context.asset,
        bar_count=(WINDOW_LONG + 1),
        fields=['price', 'open', 'high', 'low', 'close', 'volume'],
        frequency='1D')

    # Calculate indicators
    # Short term exponential moving average:
    ema_short = float(historical_data[['close']][-WINDOW_SHORT:].ewm(
                        alpha=EMA_ALPHA, adjust=False).mean().iloc[-1])
    # Long term exponential moving average:
    ema_long  = float(historical_data[['close']][-WINDOW_LONG:].ewm(
                        alpha=EMA_ALPHA, adjust=False).mean().iloc[-1])
    # Difference between short term and long term average (scaled)
    ema_diff = (ema_short - ema_long) / ema_long * 100
    
    # Plot ema_diff
    plot(context, ema_diff=ema_diff)
    
    # Buy & Sell
    if (not BOUGHT) and (ema_diff < EMA_DIFF_BUY_TRIG):
        order_target_percent(context.asset, 1)
        BOUGHT = True
        
    if BOUGHT and (ema_diff > EMA_DIFF_SELL_TRIG):
        order_target_percent(context.asset, 0)
        BOUGHT = False
    

# `analyze_live` runs on every iteration of a
# live algorithm (does not run for backtests).
def analyze_live(context, results):
    pass


# `analyze` runs at the end of a job
def analyze(context, results):
    print("Runs after job ends")
